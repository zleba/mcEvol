#include "integration.h"

#include <cmath>


Double IntegrateSplitting(function<Double(Double,int)> fun, int Nf, Double zmin, Double zmax,  Double &err)
{
	int Ndiv = 5;

	auto fAllZ = [=](Double var) {
		const Double rmin = atanh(2*zmin-1);
		const Double rmax = atanh(2*zmax-1);

		Double r = rmin + var*(rmax-rmin);

		Double x = (1 + tanh(r) )/2.;

		//return SplittingPgg1(x, nf) * 2 * x * (1-x) * (rmax-rmin);
		return fun(x, Nf) * 2 * x * (1-x) * (rmax-rmin);

	};

	Double step = 1./Ndiv;

	Double res = 0;
	err = 0;
	for(int i = 0; i < Ndiv; ++i) {
		res += Integral61(fAllZ, i*step, (i+1)*step, err);
	}

	return res;

}









//Add the error to the previous value
Double Integral61( function<Double(Double)> fun, Double xmin, Double xmax, Double &err )
{
	//const Double nodsG7[] = {0,                 0.405845151377397, 0.741531185599394, 0.949107912342759 };
	//const Double wG7[]= {0.417959183673469, 0.381830050505119, 0.279705391489277, 0.129484966168870 };
	//const Double wK7[]= {0.209482141084728, 0.190350578064785, 0.140653259715525, 0.063092092629979 };

	//const Double nodsK15[] = {0.207784955007898, 0.586087235467691, 0.864864423359769, 0.991455371120813 };
	//const Double wK15[]= {0.204432940075298, 0.169004726639267, 0.104790010322250, 0.022935322010529 };


	const Double nodsG30[] = {
	5.147184255531769583302521316672257e-02,
	1.538699136085835469637946727432559e-01,
	2.546369261678898464398051298178051e-01,
	3.527047255308781134710372070893739e-01,
	4.470337695380891767806099003228540e-01,
	5.366241481420198992641697933110728e-01,
	6.205261829892428611404775564311893e-01,
	6.978504947933157969322923880266401e-01,
	7.677774321048261949179773409745031e-01,
	8.295657623827683974428981197325019e-01,
	8.825605357920526815431164625302256e-01,
	9.262000474292743258793242770804740e-01,
	9.600218649683075122168710255817977e-01,
	9.836681232797472099700325816056628e-01,
	9.968934840746495402716300509186953e-01 
	};
	const Double wG30[] = {
	1.028526528935588403412856367054150e-01,
	1.017623897484055045964289521685540e-01,
	9.959342058679526706278028210356948e-02,
	9.636873717464425963946862635180987e-02,
	9.212252223778612871763270708761877e-02,
	8.689978720108297980238753071512570e-02,
	8.075589522942021535469493846052973e-02,
	7.375597473770520626824385002219073e-02,
	6.597422988218049512812851511596236e-02,
	5.749315621761906648172168940205613e-02,
	4.840267283059405290293814042280752e-02,
	3.879919256962704959680193644634769e-02,
	2.878470788332336934971917961129204e-02,
	1.846646831109095914230213191204727e-02,
	7.968192496166605615465883474673622e-03 
	};

	const Double wK30[] = {
	5.142612853745902593386287921578126e-02,
	5.088179589874960649229747304980469e-02,
	4.979568342707420635781156937994233e-02,
	4.818586175708712914077949229830459e-02,
	4.605923827100698811627173555937358e-02,
	4.345253970135606931683172811707326e-02,
	4.037453895153595911199527975246811e-02,
	3.688236465182122922391106561713597e-02,
	3.298144705748372603181419101685393e-02,
	2.875404876504129284397878535433421e-02,
	2.419116207808060136568637072523203e-02,
	1.941414119394238117340895105012846e-02,
	1.436972950704580481245143244358001e-02,
	9.273279659517763428441146892024360e-03,
	3.890461127099884051267201844515503e-03  };

	const Double nodsK61[] = {
	0.000000000000000000000000000000000e+00,
	1.028069379667370301470967513180006e-01,
	2.045251166823098914389576710020247e-01,
	3.040732022736250773726771071992566e-01,
	4.004012548303943925354762115426606e-01,
	4.924804678617785749936930612077088e-01,
	5.793452358263616917560249321725405e-01,
	6.600610641266269613700536681492708e-01,
	7.337900624532268047261711313695276e-01,
	7.997278358218390830136689423226832e-01,
	8.572052335460610989586585106589439e-01,
	9.055733076999077985465225589259583e-01,
	9.443744447485599794158313240374391e-01,
	9.731163225011262683746938684237069e-01,
	9.916309968704045948586283661094857e-01,
	9.994844100504906375713258957058108e-01  };

	const Double wK61[] = {
	5.149472942945156755834043364709931e-02,
	5.122154784925877217065628260494421e-02,
	5.040592140278234684089308565358503e-02,
	4.905543455502977888752816536723817e-02,
	4.718554656929915394526147818109949e-02,
	4.481480013316266319235555161672324e-02,
	4.196981021516424614714754128596976e-02,
	3.867894562472759295034865153228105e-02,
	3.497933802806002413749967073146788e-02,
	3.090725756238776247288425294309227e-02,
	2.650995488233310161060170933507541e-02,
	2.182803582160919229716748573833899e-02,
	1.692088918905327262757228942032209e-02,
	1.182301525349634174223289885325059e-02,
	6.630703915931292173319826369750168e-03,
	1.389013698677007624551591226759700e-03  };



	Double valuesG[15];
	Double valuesK[16];

	Double xmean = 0.5*(xmin+xmax);
	Double xdelta = xmean - xmin;

	for(int i=0; i < 15; i++) {
		valuesG[i] = fun(xmean + nodsG30[i]*xdelta) +  fun(xmean - nodsG30[i]*xdelta);
	}
	valuesK[0] = fun(xmean);
	for(int i=1; i < 16; i++) {
		valuesK[i] = fun(xmean + nodsK61[i]*xdelta) + fun(xmean - nodsK61[i]*xdelta);
	}

	Double intG = 0;
	Double intK = 0;

	for(int i=0; i < 15; i++) {
		intG += wG30[i] * valuesG[i] ;
		intK += wK30[i] * valuesG[i];
	}
	for(int i=0; i < 16; i++) {
		intK += wK61[i] * valuesK[i];
	}
	//cout << intK << " "<< intG << endl;

	Double errNow = abs(intK - intG);
	//errNow *= sqrt(errNow);
	errNow *= xdelta;

	err += errNow;

	return intK*xdelta;
}

//Add the error to the previous value
Double Integral( function<Double(Double)> fun, Double xmin, Double xmax, Double &err )
{
	const Double nodsG7[] = {0,                 0.405845151377397, 0.741531185599394, 0.949107912342759 };
	const Double wG7[]= {0.417959183673469, 0.381830050505119, 0.279705391489277, 0.129484966168870 };
	const Double wK7[]= {0.209482141084728, 0.190350578064785, 0.140653259715525, 0.063092092629979 };

	const Double nodsK15[] = {0.207784955007898, 0.586087235467691, 0.864864423359769, 0.991455371120813 };
	const Double wK15[]= {0.204432940075298, 0.169004726639267, 0.104790010322250, 0.022935322010529 };


	Double valuesG[7];
	Double valuesK[7];

	Double xmean = 0.5*(xmin+xmax);
	Double xdelta = xmean - xmin;

	valuesG[0] = fun(xmean);
	for(int i=1; i < 4; i++) {
		valuesG[i] = fun(xmean + nodsG7[i]*xdelta) +  fun(xmean - nodsG7[i]*xdelta);
	}
	for(int i=0; i < 4; i++) {
		valuesK[i] = fun(xmean + nodsK15[i]*xdelta) + fun(xmean - nodsK15[i]*xdelta);
	}

	Double intG = 0;
	Double intK = 0;

	for(int i=0; i < 4; i++) {
		intG += wG7[i] * valuesG[i] ;

		intK += wK7[i]  * valuesG[i];
		intK += wK15[i] * valuesK[i];
	}
	//cout << intK << " "<< intG << endl;

	Double errNow = 200*abs(intK - intG);
	errNow *= sqrt(errNow);
	errNow *= xdelta;

	err += errNow;

	return intK*xdelta;
}
